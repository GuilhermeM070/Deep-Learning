# -*- coding: utf-8 -*-
"""Redes Neurais-Sintaxe do Pytorch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Iby-TT5ttMgW-76OAa0P-bnmy8pJMCz9
"""

import torch

lista = [[1,2,3],
         [4,5,6]]

tns = torch.FloatTensor(lista)
print(tns.dtype)
print(tns)

tns = torch.DoubleTensor(lista)
print(tns.dtype)
print(tns)

tns = torch.LongTensor(lista)
print(tns.dtype)
print(tns)

tns = torch.FloatTensor(lista)
print(tns.dtype)
print(tns)

import torch
tns = torch.randn(9, 12)
tns1 = tns[0:5, 0:4]
tns2 = tns[5:, 4:]

resultado = torch.mm(tns1, tns2)
print(resultado.size())

import numpy as np
arr = np.random.rand(3,4)
arr = arr.astype(int)
tns = torch.from_numpy(arr)

print(arr)
print(arr.dtype)

print(tns)
print(tns.dtype)

tns1 = torch.ones(2, 3)
tns0 = torch.zeros(3, 5)
tnsr = torch.randn(3, 3)

print(tns1)
print(tns0)
print(tnsr)

# Coverter tensor para array numpy
arr = tnsr.data.numpy()
print(type(arr))

#Indexação
print(tnsr)
tnsr[0, 2] = -10
print('')
print(tnsr)

print('')
print(tnsr[:, 2])

#Operações com tensores
#tns = tnsr[0:2, :]
print(tns)
print(tns1)

print(tns/tns1)

tns = torch.randn(2,2,3)
print(tns)

print('')
print(tns.size())

print('')
tns=tns.view(12)
print(tns)

tns = tns.view(tns.size(0), -1)
print('')
print(tns)

import torch

tns=torch.randn(10)
if torch.cuda.is_available():
  device=torch.device('cuda')
else:
  device=torch.device('cpu')
print(device)

tns=tns.to(device)
print(tns)

import torch

tns1=torch.ones(3,2)
tns2=torch.ones(3,2)
tnsr=torch.randn(2,4)

tns_out = torch.cat( (tns1, tns2), dim=0 )
print(tns_out)

import torch
tns = tnsr[0:2, :]
tns1=torch.randn(7,7,3)
tns2=torch.randn(147,1)

tns1=tns1.view(-1, 1)
soma=tns1+tns2
print(tns1)
print(soma)